name: Deploy

on: 
  deployment:
    branches:
      - master

jobs:

  deploy:
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2
        with:
          persist-credentials: false
    
      - name: debug
        run:
          echo "${{ toJson(github) }}"

      - name: Set commit version info
        run: |
          echo "::set-env name=VERSION::$(echo "${{ github.event.deployment.sha }}" | cut -c1-7)"

      - name: Update deployment status
        run: |
          curl -X POST \
            --url ${{ github.event.deployment.statuses_url }} \
            -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'content-type: application/json' \
            -H 'accept: application/vnd.github.flash-preview+json' \
            -d "{ \
                  \"environment\": \"${{ github.event.deployment.environment }}\", \
                  \"state\": \"in_progress\", \
                  \"description\": \"Uploading assets to S3 bucket.\" \
                }"

      - name: Fetch assets
        run: |
          docker pull micahlmartin/github-deployment-test:sha-${VERSION}
          CONTAINER=$(docker create micahlmartin/github-deployment-test:sha-${VERSION})
          docker cp $CONTAINER:/srv/build ./assets
          ls -la ./assets

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET_STAGING }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-west-1'
          SOURCE_DIR: ./assets

      # - name: Create a Release
      #   uses: elgohr/Github-Hub-Action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     args: api -X create $(date +%Y%m%d%H%M%S)

      - name: Set status on failure
        if: ${{ failure() }}
        run: |
          echo "::set-env name=STATUS::failure"
      
      - name: Set status on success
        if: ${{ success() }}
        run: |
          echo "::set-env name=STATUS::success"

      - name: Update deployment status
        if: ${{ always() }}
        run: |
          curl -X POST \
            --url ${{ github.event.deployment.statuses_url }} \
            -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'content-type: application/json' \
            -d "{ \
                  \"environment\": \"${{ github.event.deployment.environment }}\", \
                  \"state\": \"${STATUS}\", \
                  \"description\": \"Deployment finished successfully.\" \
                }"

      # - name: Set release version info
      #   if: github.event_name == 'release'
      #   run: |
      #     echo "::set-env name=VERSION::${{ github.event.release.tag_name }}"
      
      # - name: Set commit version info
      #   if: github.event_name == 'push'
      #   run: |
      #     echo "::set-env name=VERSION::$(echo "$GITHUB_SHA" | cut -c1-7)"

      # - name: Set PR version info
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     echo "::set-env name=VERSION::pr-${{ github.event.pull_request.number }}"
      
      # - name: Set build info
      #   run: |
      #     echo "::set-env name=IMAGE::${IMAGE_REPOSITORY}:${VERSION}"

      # - name: Build docker container
      #   run: |
      #     docker build -t ${IMAGE} .
